@implements IDisposable
@inject ITimeService TimeService

@using System.Globalization

<div class="col">
	<div class="row">
		<h3>@($"{currentDate.Year}, {currentDate.ToString("MMM", CultureInfo.InvariantCulture)} {currentDate.Day}, {currentDate.DayOfWeek}")</h3>
	</div>
	<div class="row" style="align-items:baseline" >
		<span class="clock-time">@($"{currentDate.ToString("HH:mm")}")</span><span class="clock-time-seconds">@currentDate.Second.ToString("00")</span>
	</div>
</div>

@code {
	DateTime currentDate;
	CancellationTokenSource timeServiceCTS = new CancellationTokenSource();

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			_ = GetCurrentTimeUpdates();
		}
	}

	async Task GetCurrentTimeUpdates()
	{
		await foreach (var time in TimeService.GetCurrentTimeAsync(timeServiceCTS.Token))
		{
			currentDate = time;
			StateHasChanged();
		}
	}

	void IDisposable.Dispose()
	{
		timeServiceCTS.Cancel();
	}
}
