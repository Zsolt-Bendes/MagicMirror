@implements IDisposable
@inject IWeatherForecastService WeatherForecastService

@if (weatherResponse is null)
{
	<p>Loading...</p>
}
else
{
	@foreach (var item in weatherResponse.CurrentWeathers)
	{
		<div class="col text-center ml-2 mr-2">
			<h1>@item.City</h1>
			<img src="css/weather/svg/@(WeatherIconMapper.MapToWeatherIconName(item.Icon.ToLower())).svg" style="width:86px" />
			<h2>@item.Temp.ToString("0") °C</h2>
			<h2>@item.Description</h2>
			<h2>Max: @item.TempMax.ToString("0") °C</h2>
			<h2>Min: @item.TempMin.ToString("0") °C</h2>
		</div>
	}
}


@code {
	WeatherResponse weatherResponse;
	CancellationTokenSource streamingWeatherCTS = new CancellationTokenSource();

	protected override async Task OnInitializedAsync()
	{
		weatherResponse = await WeatherForecastService.GetWeather();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			_ = GetWeatherUpdates();
		}
	}

	async Task GetWeatherUpdates()
	{
		await foreach (var response in WeatherForecastService.GetStreamingWeather(streamingWeatherCTS.Token))
		{
			weatherResponse = response;
			StateHasChanged();
		}
	}

	void IDisposable.Dispose()
	{
		streamingWeatherCTS.Cancel();
	}
}
