@implements IDisposable
@inject IWeatherForecastService forecastService

@if (weatherResponse is null)
{
    <p>Loading...</p>
}
else
{
    @foreach (var item in weatherResponse.ForecastWeathers)
    {

    }
}


@code {
    WeatherResponse weatherResponse;
    CancellationTokenSource _forecastServiceCTS = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        weatherResponse = await forecastService.GetWeather();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = GetForecastUpdates();
        }
    }

    async Task GetForecastUpdates()
    {
        await foreach (var response in forecastService.GetStreamingWeather(_forecastServiceCTS.Token))
        {
            weatherResponse = response;
            StateHasChanged();
        }
    }

    void IDisposable.Dispose()
    {
        _forecastServiceCTS.Cancel();
    }
}
